<h1>About</h1>
<p>網頁:<a href="https://morant-4125252.github.io/cd2024/content/index.html">https://morant-4125252.github.io/cd2024/content/index.html</a><a href="https://morant-4125252.github.io/cd2024/"></a></p>
<p>網誌:<a href="https://morant-4125252.github.io/cd2024/blog/index.html"> https://morant-4125252.github.io/cd2024/blog</a></p>
<p>簡報: <a href="https://morant-4125252.github.io/cd2024/reveal">https://morant-4125252.github.io/cd2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/Morant-4125252/cd2024">https://github.com/Morant-4125252/cd2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<div style="width: 100%; height: 100%;"></div>
<div style="width: 100%; height: 100%;"></div>
<div style="width: 100%; height: 100%;"></div>
<h1>H1</h1>
<h2>W10</h2>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/S41123216/f559ffb960a5481eb6619021f340bba3/raw/b3f6848024d09f9d5e26948f3243077aa7828bbc/w10.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<h1>W1</h1>
<h4>2b 建個人課程倉儲</h4>
<div style="width: 100%; height: 100%;">
<div><span>登入 github.com, 連結到 https://github.com/mdecycu/cmsimde_site, 利用此倉儲作為 Template, 新增一個名稱為 cd2024 的倉儲, 並且將其 main 分支設為網頁根目錄.</span></div>
<p></p>
<div><span>https://github.com/mdecycu/cmsimde_site 與 https://github.com/mdecycu/cmsite 的差別為, 目前的 Template 將 cmsimde 當作目錄, 而非 cmsite 中的子模組.</span></div>
<p></p>
<div><span>上述建立個人課程 cd2024 倉儲與網站的操作影片, 建立的範例網站為: https://scrum-1.github.io/cd2024/</span></div>
<p></p>
<h2>下載可攜套件檔案</h2>
<div><span>下載可攜程式環境: portable_2024.7z (需要密碼, 下載 540MB, 解開壓縮後約 1.8GB)</span></div>
<p></p>
<div><span>下載 miktex-portable.7z (需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB)</span></div>
<p></p>
<div><span>將個人倉儲 import 至 Replit</span></div>
<div><span>從 Replit 帳號下方的 Account, Connected Services(連線服務區) 點選 Connect 後, 讓 Github 授權 Replit, 將在 Replit 中的倉儲改版後, 有權限推回 Github. 設定 Replit 與 Github 應用授權的說明影片</span></div>
<p></p>
<div><span>在 Replit Editor(編輯器中) 使用 Ctrl + z 執行 undo</span></div>
<p></p>
<div><span>在 Replit Editor(編輯器中) 使用 Ctrl + y 執行 redo</span></div>
<p></p>
<h2>設定 Github 帳號的雙重認證</h2>
<div><span>說明如何設定 Github 雙重認證, 其中手機必須先安裝 Github Mobile, 也可以使用 Authy App 作為認證套件, 一旦在 Github 帳號下的 Setting 中的 Password and authentication 啟用雙重認證, 最後必須下載對應的 Recovery codes 並存入隨身碟, 而且要寄到個人的電子郵箱.</span></div>
<div><span></span></div>
<div>
<h1>w2</h1>
<div>
<h4><span>利用 Github Classroom 指定分組倉儲</span></h4>
<div><span>由於各分組網站從 Github Classroom 執行配置, 因此該倉儲位於 mdecd2024 帳號下, 雖然各組組員具備對此分組倉儲改版的權限, 但是若將分組倉儲 import 到 Replit, 因為其倉儲擁有者為 mdecd2024, 因此無法從 Replit accoount 項下進行授權, 但是可以利用 ssh-keygen 建立 .ssh 目錄下的 id_rsa 與 id_rsa.pub, 之後除了將公鑰送到 Github 之外, 還需要在 .ssh 目錄中建立 config, 且將倉儲 .git/config 中的 https 協定改為 SSH.</span></div>
<br/>
<div><span>根據上述流程, 可以在 Replit 中以 SSH 模式取得對 Github 帳號下特定倉儲的改版全縣, 只不過 Replit 的免費帳號環境會不定時刪除 /home/runner/.ssh 目錄中的授權資料, 因此若要使用 Replit 維護從 Github Classroom 取得授權的分組倉儲, 必須使用程式方法配置 .ssh 中的 id_rsa 與 config 檔案.</span></div>
<br/>
<div><span>範例分組倉儲: https://github.com/mdecd2024/test-ag1</span></div>
<br/>
<div><span>期中分組作業名稱甲班為 2a, 乙班期中分組作業名稱則為 2b, 其中甲班第一組組長必須建立名稱為 midag1 的 Team, 讓第一組的組員員加入. 其餘各組的期中報告 Team 名稱則分別為 midag2, midag3 ....</span></div>
<br/>
<div><span>至於乙班第一組組長則必須在期中作業 2b 項下, 建立名稱為 midbg1 的 Team, 其餘乙班各組的期中報告 Team 名稱則分別為 midbg2, midbg3 ....</span></div>
<br/>
<div><span>說明乙班第一組組長如何建立 midbg1 的過程1</span></div>
<br/>
<div><span>說明乙班第一組組長如何建立 midbg1 的過程2</span></div>
<br/>
<div><span>待各分組的期中報告 Team 與倉儲全部建立就緒後, 則可後續配合期末作業名稱 2a2 與 2b2, 由甲班各組組長建立 Team finalag1, finalag2 ...., 而乙班組長則建立 Team finalbg1, finalbg2 .... 等.</span></div>
<br/>
<div><span>根據上述規劃, 乙班第一分組的期中協同倉儲將位於: https://github.com/mdecd2024/2b-midbg1, 第一組的期中報告網站將位於: https://mdecd2024.github.io/2b-midbg1.</span></div>
<br/>
<div>至於乙班第一分組的期末協同倉儲將位於: https://github.com/mdecd2024/2b2-finalbg1, 且對應的期末報告網站將位於: <a href="https://mdecd2024.github.io/2b2-finalbg1">https://mdecd2024.github.io/2b2-finalbg1</a>.</div>
<h1>w3</h1>
<div>
<h4 id="latex">期中協同分組報告</h4>
<p>請參考<span> </span><a href="https://github.com/mdecd2024/test-ag1">https://github.com/mdecd2024/test-ag1</a><span> </span>中的 latex 目錄與 downloads 目錄中的<span> </span><a href="https://github.com/mdecd2024/test-ag1/blob/main/downloads/report_github.txt">https://github.com/mdecd2024/test-ag1/blob/main/downloads/report_github.txt</a></p>
<p>並根據下列教學範例:</p>
<p>說明<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EZbnYCWfEylAmXhpOqXWgZUBMxerlNYRgQsBBjZAQ90lmg?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;e=8nGXOz">如何將組員的個人倉儲納入分組倉儲成為子模組</a></p>
<p>說明<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EUlbUzMAyBFHrHX7bLPRKzsB3L-T-D413BPuH6pMSEZmjg?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;e=HjIQab">如何在 Replit 維護分組倉儲</a></p>
<p>由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成下列文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2b-midbgx_report.pdf 的製作.</p>
<p>若要在近端使用可攜程式環境編譯分組 LaTeX 報告, 請下載<span> </span><a href="http://229.cycu.org/miktex-portable.7z">miktex-portable.7z</a><span> </span>(需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB) 以及參考資料:<span> </span><a href="http://229.cycu.org/latex_images_github.7z">latex_images_github.7z</a><span> </span>(需要密碼)</p>
<p><a href="https://webthesis.biblio.polito.it/16429/1/tesi.pdf">2021 ANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING PRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION SYSTEMS AND THEIR INTEGRATION.pdf</a><span> </span>or<span> </span><a href="http://229.cycu.org/2021%20ANALYSIS%20OF%20THE%20ODOO%20SOFTWARE%20CAPABILITIES%20REGARDING%20PRODUCT%20LIFECYCLE%20MANAGEMENT,%20MANUFACTURING%20EXECUTION%20SYSTEMS%20AND%20THEIR%20INTEGRATION.pdf">local</a><span> </span>download (password required) (Odoo 軟體在產品生命週期管理、製造執行系統及其整合上的功能分析)</p>
<p>英文單字查詢:<span> </span><a href="https://mde.tw/cd2024/downloads/2021_odoo_reading.html">2021_odoo_reading.html</a></p>
<br/>
<h2>將組員的個人倉儲設為分組倉儲子模組</h2>
<div><span>cd2024 課程希望將各分組的組員個人網站, 以 submodule 的方式納入各分組倉儲與網站, 設定的指令為:</span></div>
<br/>
<div><span>git submodule add 組員的個人倉儲網址 組員的學號</span></div>
<br/>
<div><span>例如: 假設組員的 cd2024 個人倉儲位於: https://github.com/scrum-1/cd2024, 且該組員的學號為 41123299, 則該組員必須在進入該組的倉儲目錄後, 執行:</span></div>
<br/>
<div><span>git submodule add https://github.com/scrum-1/cd2024.git 41123299</span></div>
<br/>
<div><span>如此, Github 帳號為 scrum-1 的組員, 其個人倉儲就會設定為分組倉儲的子模組, 而且是以其學號命名此一子模組的目錄名稱. 這樣設定的好處是: 各組員可以自行管理個人的課程倉儲與網站, 也就是位於其 Github 帳號下的 cd2024, 並且自行決定要整合到分組倉儲與網站的版本. 也能將自己在課程網站的資料, 直接用連結導入分組網站, 無需額外將資料搬進分組倉儲.</span></div>
<br/>
<div><span>另外一個使用 Github Classroom 派送分組倉儲的好處, 是 mdecycu 自動成為各分組倉儲的管理者之一, 若各組在改版或解決衝突的過程發生問題, mdecycu 可以協助處理.</span></div>
<br/>
<div><span>一旦分組倉儲帶有以各組員學號作為子模組之後, git clone 倉儲必須使用:</span></div>
<br/>
<div><span>git clone --recurse-submodules 加上各組的倉儲 URL</span></div>
<br/>
<div><span>以第一組期中分組倉儲的 git clone 為例, 並且使用 putty session 名稱 github.com:</span></div>
<br/>
<div><span>git clone --recurse-submodules git@github.com:mdecd2024/2b-midbg1.git</span></div>
<br/>
<div><span>而且若要在分組倉儲中更新各組員的子模組版本, 則必須更換目錄到該組員的學號目錄中並且使用 git pull origin main, 才能取下該組員其 cd2024 個人倉儲的最新內容. 取下組員資料後, 若要新增提交推送, 則必須再更換目錄回分組倉儲後才能執行.</span></div>
<h1>w4</h1>
<div>
<h4><span> Odoo 參考文章中英並列</span></h4>
<div><span>教學影片: 以第六組為例, 利用 Codespaces 維護倉儲內容</span></div>
<br/>
<div><span>教學影片: 如何利用 Github Actions 編譯 LaTeX 得到分組 pdf 報告</span></div>
<br/>
<div><span>教學影片: 如何利用 Gitpod 加上 token 取得分組倉儲權限</span></div>
<br/>
<h2>w4 2b 分組任務</h2>
<div><span>請各組自行搜尋前面已經發布的教學影片, 分別</span></div>
<br/>
<div><span>在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上</span></div>
<div><span>從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排</span></div>
<div><span>並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點</span></div>
<br/>
<h2>Github 個人與分組倉儲的維護方式</h2>
<div><span>個人的倉儲名稱為 cd2024, 而期中的分組倉儲位於 mdecd2024 帳號下, 以2a 開頭, 加上 "-" 之後再補上 midag + 組別, 且各組員的 cd2024 個人倉儲必須設為各分組倉儲的子模組, 目的在各組員可以自行管理並維護自己的課程倉儲, 並決定要引入分組倉儲的內容版次.</span></div>
<br/>
<div><span>各組員與分組倉儲的資料, 包括文字資料 (含 LaTeX 報告章節資料)、零組件檔案、零件工程圖或組立圖檔 (含 BOM 與爆炸圖), 以及目前正在整理的教學影片, 或者是各學員將操作流程錄製成的影片或 Wink 資料.</span></div>
<h1>W5</h1>
<div>
<div><span></span>
<div><span></span>
<h4><span> 教學影片分組整理並自評</span></h4>
<div><span>假如你好奇這個概念哪裡來的: 請參考反思一 and 反思二.</span></div>
<br/>
<div><span>對於事不關己或者不明白為何團隊中的成員 (這裡指教與學的相關人、事與物), 總讓人提不起興趣, 但若能在過程中找到主要在乎的角色、任務或者緣由, 或許就能從應付著手, 一直到終於了解天下沒有白吃的午餐, 所有的努力付出, 終究不會白費.</span></div>
<br/>
<div><span>此外, 假如想參考先前學長推甄研究所的相關資訊, 請利用 Team code: n9k585c 進入自行查看.</span></div>
<div>
<p>cd2024 2a 1 blog setup 1</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid268248" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/boTF4TcdFLg?si=IQShBJntywf6t0Y6" title="YouTube video player" width="300"></iframe></div>
<p>cd2024 2a 2 odoo plm簡介 2</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid276702" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/uaiWkj7uqyY?si=9GEA8e3s5sfnoIvE" title="YouTube video player" width="300"></iframe></div>
<p>cd2024 2a w2 3 如何建立各組的 Team midag1 並利用 Codespaces 維護內容 3</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid911177" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/mx8A_qwlTik?si=ce4S1xw8vGy1NpX6" title="YouTube video player" width="300"></iframe></div>
<p>cd2024 2a w2 4 利用 Replit 管理 Github Classroom 分組倉儲 4</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid417313" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/rLGfbspp2r4?si=0kepthKS1hd9t0zo" title="YouTube video player" width="300"></iframe></div>
<p>cd2024 2a w2 5 如何利用近端可攜環境與外部 IPv4 開啟動態網站 5</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid306855" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/vY2wRD4qwUk?si=vOlv0JHgdtiX4MwJ" title="YouTube video player" width="300"></iframe></div>
<p>cd2024 2a w3 如何將學員倉儲設為分組倉儲的子模組 6</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid818294" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/n9uB9-WSd6w?si=wpLm9vYlVtNa72rY" title="YouTube video player" width="300"></iframe></div>
<p>cd2024 2a w3 利用分組協同建立 LaTeX 報告 7</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid416590" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/-tSx_Vg6kfk?si=4UL2fLBHAyaN7opl" title="YouTube video player" width="300"></iframe></div>
</div>
<br/>
<h2>w5 2b 分組任務</h2>
<div><span>請各組自行搜尋前面已經發布的教學影片, 分別</span></div>
<br/>
<div><span>在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上</span></div>
<div><span>從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排</span></div>
<div><span>並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點</span></div>
<br/>
<h2>如何統整組員子模組中的協同設計網誌</h2>
<div><span>當各組員每週的協同設計網誌文章放在個別的 cd2024 倉儲的 markdown 目錄中, 只要修改分組倉儲中的 pelicalconf.py, 使用 Pelican 設定中的 PATH 與 OUTPUT_PATH 變數, 指定網誌統整目錄, 就可以在分組倉儲中納入所有組員在子模組中所編寫的協同網誌.</span></div>
<br/>
<div><span>實際的設定操作 pelicanconf_py.txt, 是利用 pelicanconf.py 中的程式設定段, 將子模組中 markdown 目錄的 .md 動態複製到分組倉儲中的 combined_directory, 並避開分組倉儲與學員子模組倉儲中的 pages 目錄下的 .md 檔案後, 再進行網誌轉檔, 並且所產生的網誌超文件將存入所設定的 blog 目錄.</span></div>
<br/>
<div><span>完成設定後的網誌轉檔指令為: pelican -s local_publishconf.py 表示要利用 local_publishconf.py 的設定進行轉檔, 且先前有關 pelicanconf.py 的設定也將導入執行.</span></div>
<br/>
<div><span>過程中, 各組員必須將個別的網誌 .md 檔案名稱加上前綴字串, 例如: "學號_" 加上獨一無二的網誌 Slug 字串名稱, 且 Category 使用該組員的學號作為標示. 之後各組統整轉檔時, 才不至於發生相同網誌文章檔案名稱衝突的錯誤, 且從各分組網誌的 Categories 中即可找到各組員所編寫的所有網誌內容.</span></div>
<br/>
<h2>利用 NX1872 協同繪製零組件</h2>
<div>
<p data-immersive-translate-walked="4014970d-da73-4cae-98f8-33457bd843c0">從電腦輔助設計室中的電腦 C:\Program Files\Siemens\NX1872 取得所需的 NX 套件目錄檔案, 之後將 NX1872 目錄存入隨身碟後, 可利用下列 start_USB_nx1872.bat 啟動.</p>
<p>電腦輔助設計室中 C: 安裝 NX1872, D: 則配置 NX2206 與 NX12, 若在電腦教室則可利用下列批次檔案啟動 NX, 若在各自的電腦或隨身碟帶有各版次的 NX 資料, 只需要透過網路取得授權, 就可直接從 USB 中執行各版次的 NX.</p>
<p>下載<a href="http://229.cycu.org/NX2027.3401_lite_cad2022.7z">NX2027_lite</a><span> </span>(需要密碼, 解開後約 8G, 這個版本僅供參考)</p>
<p>下載<span> </span><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EehhlaMDzTxAlOBppbPSoPwBCzsOQxvshtNL8xJel-zbJQ?e=YwKvdH">Siemens NX1872.7z</a><span> </span>(需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872)</p>
</div>
</div>
</div>
<h1>w6</h1>
<h4>ODOO, NX, Sourcetree, Github and Replit</h4>
<p>利用 ODOO PLM, Siemens NX, Sourcetree, Github 分組倉儲與 Replit 打造協同產品開發環境</p>
<p>下載<span> </span><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EehhlaMDzTxAlOBppbPSoPwBCzsOQxvshtNL8xJel-zbJQ?e=YwKvdH">Siemens NX1872.7z</a><span> </span>(需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872)</p>
<p>下載<span> </span><a href="http://229.cycu.org/SourceTree_portable.7z">Sourcetree_portable.7z</a><span> </span>(需要密碼)</p>
<p>其他工具包括 CoppeliaSim, SciTE, Portablegit, Putty, Zoomit, Python, Solvespace 以及 Process Explorer 等.</p>
<p>配置重點: NX, Sourcetree 與 CoppeliaSim 設定檔案與管理分組倉儲的權限, 必須存至可攜系統, 並分別從可攜系統啟動後的命令列中啟動.</p>
<p>下載<span> </span><a href="https://mde.tw/cd2024/downloads/Solvespace_model%20_2d_for_cd2024_w6.7z">Solvespace_model _2d_for_cd2024_w6.7z</a></p>
<h2>CoppeliaSim 檔案格式</h2>
<p>下載<span> </span><a href="https://mde.tw/cd2024/downloads/copsim_midterm_cube2_xml.7z">copsim_midterm_cube2_xml.7z</a></p>
<ol>
<li>CoppeliaSim 目前提供二位元與 XML 場景格式</li>
<li>XML 場景支援儲存為單一檔案或多個模型與影像檔案</li>
<li>4.5.1 之後的版本, 其設定資料並非在套件目錄, 而是儲存在操作系統的 AppData/Roaming 目錄中</li>
<li>4.5.1 版儲存為多 XML 檔案格式時, 無法帶出場景中的 png 圖檔, 4.6.0 版之後才修正此一錯誤</li>
<li>目前能夠支援 IPv4 與 IPv6 網際場景模擬的版本僅修改至 4.5.1 版</li>
<li>XML 檔案應用廣泛, 協同產品設計過程可能需要利用程式方法處理零組件與模擬場景互相轉換取得的 XML 格式檔案</li>
</ol>
<h1>w8</h1>
<div><span>協同資料處理</span></div>
<div><span>根據 2a_cd2024_midterm.csv, 以及 2b_cd2024_midterm.csv 中的學號、Github 帳號與組別, 設法在各組員與分組網站中, 列出各學員的 cd2024 倉儲、網站, 以及各班各組的期中報告倉儲與網站連結.</span></div>
<h4></h4>
<div><span>過程中, 請詳細說明各組及學員的倉儲與網站中的連結資料如何建立? 手動輸入? 利用程式進行處理? 或者採分工合作方式建立?</span></div>
<h4></h4>
<div><span>2b step1 取出資料放入數列</span></div>
<h4></h4>
<h2>心得</h2>
<div><span>我是問chatgpt ，但發現問題有時候跳針，所以試了很久，要把問題問得非常精確才跑出你所要的資料</span></div>
<h4>1. 讀取CSV文件</h4>
<p>我們需要讀取<code>2a_cd2024_midterm.csv</code>和<code>2b_cd2024_midterm.csv</code>文件，這兩個文件包含學號、Github帳號和組別等信息。</p>
<h4>2. 合併數據</h4>
<p>我們需要根據學號來合併這兩個文件的數據，確保每個學員的信息完整。</p>
<h4>3. 生成連結</h4>
<h4><strong>個人倉儲和網站連結</strong>：根據每個學員的GitHub帳號，生成其個人cd2024倉儲和網站的連結。</h4>
<h4><strong>組倉儲和網站連結</strong>：根據每個組的組別信息，生成期中報告倉儲和網站的連結。</h4>
<h4>4. 建立數據結構</h4>
<p>我們將這些生成的連結放入一個數據結構中，方便後續使用。</p>
<h4>5. 輸出結果</h4>
<p>將最終結果輸出到新的CSV文件或其他格式中，以便查看和使用。</p>
<p>以下是詳細步驟的Python代碼：</p>
<p>import pandas as pd</p>
<p># 讀取CSV文件<br/>data_2a = pd.read_csv('/mnt/data/2a_cd2024_midterm.csv')<br/>data_2b = pd.read_csv('/mnt/data/2b_cd2024_midterm.csv')</p>
<p># 合併數據<br/>merged_data = pd.merge(data_2a, data_2b, on='學號')</p>
<p># 定義函數來生成連結<br/>def generate_github_repo_link(github_account, repo_name):<br/> return f'https://github.com/{github_account}/{repo_name}'</p>
<p>def generate_github_pages_link(github_account, repo_name):<br/> return f'https://{github_account}.github.io/{repo_name}/'</p>
<p># 為每個學員生成倉儲和網站連結<br/>merged_data['cd2024_repo'] = merged_data['Github帳號'].apply(lambda x: generate_github_repo_link(x, 'cd2024'))<br/>merged_data['cd2024_site'] = merged_data['Github帳號'].apply(lambda x: generate_github_pages_link(x, 'cd2024'))</p>
<p># 為每個組生成期中報告倉儲和網站連結<br/>group_data = merged_data.groupby('組別').first().reset_index()<br/>group_data['midterm_repo'] = group_data['Github帳號'].apply(lambda x: generate_github_repo_link(x, 'midterm_report'))<br/>group_data['midterm_site'] = group_data['Github帳號'].apply(lambda x: generate_github_pages_link(x, 'midterm_report'))</p>
<p># 合併組的期中報告連結回到原數據<br/>final_data = pd.merge(merged_data, group_data[['組別', 'midterm_repo', 'midterm_site']], on='組別', suffixes=('', '_group'))</p>
<p># 選擇需要的列<br/>final_data = final_data[['學號', 'Github帳號', '組別', 'cd2024_repo', 'cd2024_site', 'midterm_repo', 'midterm_site']]</p>
<p># 輸出結果到CSV文件<br/>final_data.to_csv('/mnt/data/final_cd2024_midterm_results.csv', index=False)</p>
<p>print("完成數據處理並輸出結果到 'final_cd2024_midterm_results.csv'")</p>
<h4>詳細說明</h4>
<h4><strong>讀取CSV文件</strong>：使用<code>pandas</code>讀取CSV文件，將數據放入DataFrame中。</h4>
<h4><strong>合併數據</strong>：根據學號來合併兩個DataFrame，確保每個學員的信息完整。</h4>
<h4><strong>生成連結</strong>：</h4>
<h4>個人cd2024倉儲和網站連結：使用GitHub帳號生成。</h4>
<h4>組期中報告倉儲和網站連結：使用組別信息生成。</h4>
<h4><strong>建立數據結構</strong>：將生成的連結添加到DataFrame中。</h4>
<h4><strong>輸出結果</strong>：將最終的數據輸出到新的CSV文件中。</h4>
<p>這樣做可以確保數據的準確性和一致性，並且利用程式進行處理可以減少人工輸入錯誤。</p>
<h1>w9</h1>
<div>
<div><span> 期中整合</span></div>
<div><span>影片</span></div>
<div><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/JkpBokYb9XI" width="560"></iframe></div>
<div>
<h1>w10</h1>
<h4 id="brython">建立各班學員的倉儲、網站與分組連結</h4>
<p>這是 W10 實習的任務一:</p>
<p>已知:<span> </span><a href="https://mde.tw/cd2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/8ba6fa28317bc7a784d8350e7bc33580/raw/27ae4eb5669e4495b3e3a164d404628913a011ed/2b_w10_step1.py">2b 初步資料放入數列</a><span> </span>可以將<span> </span><a href="https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt">2b.txt</a><span> </span>即時資料取出, 並且將每一行隔開後, 逐一放入數列.</p>
<p>後續處理: 只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html.</p>
<p>學員倉儲連結 template: https://github.com/學員帳號/cd2024</p>
<p>學員網站連結 template: https://學員帳號.github.io/cd2024</p>
<p>2b 分組倉儲連結 template: https://github.com/mdecd2024/2b-midbg組別</p>
<p>2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別</p>
<p>處理結果:</p>
<p><a href="https://mde.tw/cd2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/8ba6fa28317bc7a784d8350e7bc33580/raw/9e0540c36b0c6d74065ddc23ed3f365e1ba14c53/2b_w10_step2.py">列出 2b 各學員評分相關網站</a></p>
<p><a href="https://mde.tw/cd2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/8ba6fa28317bc7a784d8350e7bc33580/raw/a035644a54de63d3b920211e78e7532837bda516/2a_w10_step2.py">列出 2a 各學員評分相關網站</a></p>
<h2>鋼球平衡台 PID 控制與模擬</h2>
<p>這是 W10 實習的任務二:</p>
<p>請下載<span> </span><a href="http://229.cycu.org/cd2024_ball_balancing_platform_control_ref.7z">cd2024_ball_balancing_platform_control_ref.7z</a>, 閱讀後請將摘要內容放入個人與分組網誌中.</p>
<p>閱讀結果:</p>
<p>各篇論文要點摘要：</p>
<p>論文一：Construction and theoretical study of a ball balancing platform</p>
<p>探討自動控制理論在穩定動態系統時的局限性，以球體平衡平台為例。 建立球體平衡平台的理論模型，並與實際搭建的平台進行比較。 分析理論與實際結果之間的差異，探討控制理論與系統實施的挑戰。</p>
<p>結論：</p>
<p>線性控制可以實現球體平衡平台的良好性能，但存在靜態誤差。 理論與實際結果的差異主要來自於物理模型的誤差和電子元件的非理想特性。 穩定動態系統的性能受限於狀態調整的靈活性、控制器設計和輸入數據的準確性。</p>
<p>論文二：A real time control system for balancing a ball on a platform with FPGA parallel implementation</p>
<p>提出基於 PID 控制器的解決方案，以提高球體在平台上的位置調節精度。 使用 FPGA 實現平行計算，以提高系統速度和性能。 開發球體平衡平台的轉移函數，並合成 PID 控制器。</p>
<p>結論：</p>
<p>透過 FPGA 平行計算實現的 PID 控制器能有效提高球體位置調節精度。 該方案可應用於控制具有多個參數的高速物件。</p>
<p>論文三：Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach</p>
<p>設計和比較三種控制結構，用於自動穩定球體在平台上的位置和軌跡追踪：PD 控制器、狀態空間反饋和帶狀態空間回饋的狀態空間觀測器。 使用牛頓法推導球體平衡平台的數學模型，並設計直流電機位置迴路控制。</p>
<p>結論：</p>
<p>三種控制結構均能實現穩定控制，但狀態空間觀測器具有最佳性能。 該研究建立了一個教育平台，用於向非技術人員解釋基本控制系統原理。</p>
<p>論文四：Design and Implementation a Ball Balancing System for Control Theory Course</p>
<p>開發一個球體平衡系統，使用微控制器和控制演算法來調節球體在梁上的平衡。 利用超聲波傳感器獲取球體位置，並使用 PID 控制演算法調整梁的角度。 開發介面程式，將即時位置曲線繪製在 MATLAB 中。</p>
<p>結論：</p>
<p>球體平衡系統是一個低成本的教育工具，可用於教授控制理論的應用。 該系統允許學生將理論知識應用於實踐中，並了解封閉迴路回饋系統和 PID 演算法的原理。</p>
<p>論文五：Ball on the plate balancing control system</p>
<p>設計一個二自由度球體平衡實驗平台，用於測試和驗證平衡控制演算法。 使用電阻式觸摸屏獲取球體位置數據，使用步進電機和位置傳感器控制平台傾斜角度。 設計基於 AVR 微控制器的雙環下屬控制系統，使用 PID 控制器維持球體平衡。</p>
<p>結論：</p>
<p>該系統使用步進電機替代伺服電機，並無需外部電腦進行圖像處理，具有成本效益和易於控制的優勢。 未來計劃改進球體位置回饋信號的濾波，以提高控制系統的速度和品質。</p>
<p>論文六：2D Ball Balancer Control using QUARC</p>
<p>使用 QUARC 軟體設計和實現球體在二維平台上的位置控制。 設計 PD 和 PID 控制器，並探討設定點權重和積分器抗飽和等控制技術。 使用攝像頭讀取球體位置，並進行校準和轉換。</p>
<p>結論：</p>
<p>PD 和 PID 控制器均能實現球體位置控制，但 PID 控制器在跟踪斜坡和正弦參考信號時具有更好的性能。 該實驗涵蓋了建模、控制器設計、模擬和實施等多個控制系統的關鍵步驟，為學生提供了寶貴的學習經驗。</p>
<p>接下來, 必須要設法了解, 哪一篇或哪幾篇論文對我們解決下列問題最有參考價值!</p>
<p>請從下列檔案中, 在個人與分組網站中說明從零組件繪圖、轉入 CoppeliaSim, 並透過 PID 控制後, 展示在不同的控制參數設定, 鋼球的 x 座標與 y 座標運動路徑圖.</p>
<p><a href="http://229.cycu.org/ball_beam_balancing_PID_control_coppeliasim_1d_and_2d_cd2024_w9.7z">ball_beam_balancing_PID_control_coppeliasim_1d_and_2d_cd2024_w9.7z</a><span> </span>(password required to download)</p>
<p><a href="https://mde.tw/cd2024/downloads/Solvespace_model%20_2d_for_cd2024_w6.7z">Solvespace_model _2d_for_cd2024_w6.7z</a></p>
<p>實習步驟:</p>
<p>開啟可攜程式系統中的 CoppeliaSim 開啟鋼球平衡台模擬場景 啟動可攜程式系統, pip install keyboard cbor pyzmq matplotlib 在 SciTE 中執行上列程式, 確定系統穩定後, 按下 q 終止模擬 matplotlib 將畫出鋼球在平台上的 x 與 y 座標圖</p>
<h2>鋼球平衡台零組件繪圖</h2>
<p>這是 W10 實習的任務三:</p>
<p>請根據<span> </span><a href="https://mde.tw/cd2024/downloads/Solvespace_model%20_2d_for_cd2024_w6.7z">Solvespace_model _2d_for_cd2024_w6.7z</a><span> </span>零組件尺寸, 利用<span> </span><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EehhlaMDzTxAlOBppbPSoPwBCzsOQxvshtNL8xJel-zbJQ?e=YwKvdH">Siemens NX1872.7z</a><span> </span>(需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872) 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中.</p>
</div>
</div>
<p><!-- ########################################## --></p>
<h1>w12</h1>
<p>NX零組件:<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41123224_nfu_edu_tw/EUNa6jwGAetDhZryK-cMeKoB8BhRHZGpdMilEZpNwdfwkA?e=8oRmoV">零件3</a></p>
<h1>w13</h1>
<h4>2a w13 第一個教學影片:</h4>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid897837" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Cy3j6n0a9wQ?si=WSisWDId_Tl6qWNo" title="YouTube video player" width="300"></iframe></div>
<p>我們經常提起 Windows 64 位元操作系統環境下的所謂可攜程式系統, 其時主要的考量是希望所開發的工具不僅能在 Microsoft Windows 環境中使用, 同時也能在<span> </span><a href="https://en.wikipedia.org/wiki/Linux">Linux</a><span> </span>(這裡指<span> </span><a href="https://ubuntu.com/">Ubuntu 操作系統</a>) 以及<span> </span><a href="https://en.wikipedia.org/wiki/MacOS">macOS</a><span> </span>(<a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution">BSD 系統</a>) 中執行.</p>
<p>無論是<span> </span><a href="http://229.cycu.org/Portable_2024.7z">Portable_2024.7z</a><span> </span>或者最新釋出專用於<span> </span><a href="https://community.sw.siemens.com/s/question/0D54O000061xWZcSAM/nx-june-2019-functional-release-nx-1872-series-is-available-for-download">NX1872</a>(2019.06 釋出, 目前已經不再更新) 用來開發 NXOpen Python 程式的可攜環境:<span> </span><a href="http://229.cycu.org/Python_for_NX1872.7z">Python_for_NX1872.7z</a>, 都是在這樣的架構下產生.</p>
<p>由於數位裝置與網路的無所不在, 產品設計工程師必須能在任何地方進行輔助設計與內容管理, 更重要的是過程中所產生的數位資料必須儘可能在產品生命週期間放置在保全度較高的設備中, 於是對於面對手機、平板與電腦前面的工程師, 必須能將數位資料送到近端環境與雲端環境中的資料中心.</p>
<p>另外一個重點是, 隨著 AI 工具的普及, 雲端產品協同設計將成為主流, 各項系統設計與應用將逐一結合近端與雲端裝置, 成為無所不在的設計整合環境, 因此工程師除了應用既有的輔助設計套件外, 還要學習如何打造自己團隊使用的協同產品設計工具, 以下為兩個簡單的範例:</p>
<p><a href="http://229.cycu.org:9447/?semester=1121&amp;classid=%E8%A8%AD%E4%BA%8C%E7%94%B2">http://229.cycu.org:9447/?semester=1121&amp;classid=設二甲</a><span> </span>可以從教務主機擷取各學年的班級課表, 程式碼位於<span> </span><a href="https://gist.githubusercontent.com/mdecycu/aaced903b90465ed1718edb68e3d10a6/raw/cfce17938843e1f9a9be75d0cf2c2dee7c702291/nfulist_2024_v2.py">nfulist_v2_2024.py</a>, 此套件可以用於機械產品開發過程, 透過雲端程式即時擷取在設計運算或參數選擇時, 動態從其他零組件協同供應商或設計便覽伺服器中擷取所需的資料.</p>
<p><a href="http://229.cycu.org:88/">http://229.cycu.org:88</a><span> </span>則是一個線上多人猜數字遊戲, 採用 Python 與 Javascript 結合<span> </span><a href="https://en.wikipedia.org/wiki/WebSocket">WebSocket</a><span> </span>編寫, 使用者輸入姓名後, 可以同步參與多人猜數字遊戲, 每一階段各用戶只能最多猜 10 次, 每一輪優勝者可得一分. 程式碼位於<span> </span><a href="https://gist.githubusercontent.com/mdecycu/aaced903b90465ed1718edb68e3d10a6/raw/cfce17938843e1f9a9be75d0cf2c2dee7c702291/guess_game_server.py">guess_game_server.py</a><span> </span>與<span> </span><a href="https://gist.githubusercontent.com/mdecycu/aaced903b90465ed1718edb68e3d10a6/raw/cfce17938843e1f9a9be75d0cf2c2dee7c702291/guess_game.html">guess_game.html</a>.</p>
<p></p>
<h2>利用零件 Hole 產生對應 Cylinder 元件</h2>
<div>利用夠深的零件孔壁中的各節點, 可以在 Shape Editor 模式下建立 Cylinder 元件, 其步驟如下:
<ol>
<li>選擇帶有 Hole (可能必須夠深) 的零件.</li>
<li>利用 CoppeliaSim 左側的 Shape Editor 按鈕, 將場景轉換為 Shape Editor 模式.</li>
<li>利用滑鼠中鍵滑動, 將場景正對所要生成 Cylinder 元件的孔位置, 然後利用滑鼠中間的滾輪將孔儘量拉近.</li>
<li>利用滑鼠左鍵將 Shape Editor 出現的內建視窗, 從 Triangle edit mode, 轉為 Vertex edit mode, 然後左手按住 Shift, 右手滑鼠左鍵按下後, 從左上至右下的位置涵蓋整個孔的位置.</li>
<li>將 Shape Editor 模式的 Vertex edit mode 切回 Triangle edit mode, 然後利用 Extract Clinder 功能, 針對上列步驟所選到的 Vertex(圓孔的內壁點座標) 作為依據, 建立一個圓柱體 (Cylinder) 元件.</li>
<li>關閉 Shape Editor 內建表單視窗後, 選擇 Yes 或 No 都可完成上述從孔的內壁點座標生成圓柱體的步驟.</li>
</ol>
<p>以下教學影片說明上述說明, 以 STL 零組件格式轉入 CoppeliaSim 建立場景:</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid491289" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/-0mbtk1AuoY?si=9gsEqlCoK0x91p5W" title="YouTube video player" width="300"></iframe></div>
<div class="fluid-width-video-wrapper">
<h1>w14</h1>
</div>
<div class="fluid-width-video-wrapper">
<section class="post-content">
<p data-immersive-translate-walked="474cf261-e885-484a-98b4-368d0a222143">執行上列 2bg6 採 NXOpen Python 程式執行自動存組立檔案以及輸入 STL 的示範影片：</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid989276" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/PKmqI_FaliI?si=8Ge9lvHzGRL32mU1" title="YouTube video player" width="300"></iframe></div>
<p>2a w14 運動場景的模擬與控制影片:</p>
<div class="fluid-width-video-wrapper"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="150" id="fitvid447150" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Hyx9cW2LJVM?si=5NQiBkTcmS9Llh-1" title="YouTube video player" width="300"></iframe></div>
</section>
<section class="post-info">
<h2 class="post-tags"><a data-immersive-translate-walked="474cf261-e885-484a-98b4-368d0a222143" href="https://github.com/mdecd2024/2bstud-2bsite/discussions/5">w14 2b 各組任務回報區</a></h2>
<p>第二組檔案連結:<a href="https://nfuedu-my.sharepoint.com/personal/41123214_nfu_edu_tw/_layouts/15/onedrive.aspx?id=%2Fpersonal%2F41123214%5Fnfu%5Fedu%5Ftw%2FDocuments%2F%E9%9B%B6%E4%BB%B6w12&amp;ga=1">https://nfuedu-my.sharepoint.com/personal/41123214_nfu_edu_tw/_layouts/15/onedrive.aspx?id=%2Fpersonal%2F41123214%5Fnfu%5Fedu%5Ftw%2FDocuments%2F%E9%9B%B6%E4%BB%B6w12&amp;ga=1</a></p>
<div class="clear"></div>
</section>
<aside class="post-nav">
<section class="post-nav-teaser"></section>
</aside>
</div>
</div>
<h1>w17</h1>
<h2>h1</h2>
<p>python連結:<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41123224_nfu_edu_tw/Efg3djaEWm1Ak5SyFCZWM_0BXyyuqgUhjphovQmygthNCw?e=PpL9SC">journal.py</a></p>
<p>影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ijUaPIhDqao" width="560"></iframe></p>
<p></p>
<h2>h2</h2>
<p>python連結:<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41123224_nfu_edu_tw/EaFyDxXE79NFooBdY-eouycB9yNfj3I_9StIaI5QC3BgAw?e=EwE0cZ">journal2.py</a></p>
<p>影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/e2xZJJNsB4o" width="560"></iframe></p>
<h2>h3</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/AyX1g7_RXvE" width="560"></iframe></p>
<h1>學習AI</h1>
<h2>工具</h2>
<p>Jibyte</p>
<p>是一個線上平台，專注於提供數據分析和資料可視化服務。其主要功能包括：</p>
<p>數據分析：用戶可以上傳並分析他們的數據，從而獲得有價值的洞見。<br/>資料可視化：提供多種可視化工具，幫助用戶以直觀的方式呈現數據，包括圖表、圖形和儀表板等。<br/>自動化報告：平台能夠自動生成數據報告，簡化了數據分析結果的呈現和分享過程。<br/>協作功能：支持團隊合作，用戶可以與同事共同編輯和查看數據分析結果。<br/>集成：與各種數據來源和工具集成，方便用戶導入和導出數據。<br/>這些功能旨在幫助企業和個人更好地理解和利用他們的數據，提升決策過程的效率和效果。</p>
<p>Decktopus</p>
<p>是一個線上平台，專注於簡化和加速演示文稿的創建過程。其主要功能包括：</p>
<p>1. **模板和主題**：提供各種專業設計的演示模板和主題，幫助用戶快速開始創建演示文稿。<br/>2. **自動化內容生成**：平台能根據用戶的需求自動生成演示文稿內容，包括文字、圖片和圖表等。<br/>3. **拖放編輯**：簡單易用的拖放編輯器，允許用戶輕鬆添加和調整演示文稿中的各種元素。<br/>4. **協作工具**：支持多用戶協作，團隊成員可以共同編輯和評論演示文稿。<br/>5. **多媒體集成**：允許用戶添加視頻、音頻和其他多媒體元素，使演示文稿更加生動和吸引人。<br/>6. **分享和發佈**：提供多種分享選項，包括鏈接分享、下載為PDF或PPT，以及直接在平台上展示演示文稿。</p>
<p>這些功能旨在幫助用戶快速、輕鬆地創建專業水平的演示文稿，適用於商務、教育、個人項目等各種用途。</p>
<p>Kome.ai</p>
<p>是一個專注於提高團隊溝通和生產力的線上平台。其主要功能包括：</p>
<p>1. **會議記錄**：自動記錄和轉錄線上會議內容，方便會後回顧和查找重點資訊。<br/>2. **搜索功能**：提供強大的搜索工具，允許用戶快速查找過去會議中的特定資訊或關鍵詞。<br/>3. **議程和跟進事項**：幫助用戶設置會議議程並跟蹤會議結束後的行動事項，確保所有事項都得到有效處理。<br/>4. **跨平台整合**：支持與多種會議平台和工具（如Zoom、Google Meet、Microsoft Teams等）集成，方便用戶無縫使用。<br/>5. **實時協作**：允許團隊成員實時協作和注釋會議記錄，增強團隊間的溝通和協作效率。<br/>6. **數據安全**：強調數據隱私和安全，確保會議內容的保密性和安全性。</p>
<p>這些功能旨在幫助團隊更高效地管理會議流程，提升工作效率，並確保所有重要資訊都能被有效地記錄和利用。</p>
<p>MidJourney</p>
<p>是一個基於人工智慧的圖像生成平台，專門用於創建和探索藝術圖像。它主要提供以下功能：</p>
<p>1. **AI圖像生成**：使用人工智慧技術，根據用戶提供的文本描述生成高品質的藝術圖像。<br/>2. **藝術探索**：用戶可以瀏覽和探索由AI生成的各種風格和主題的藝術作品。<br/>3. **自定義生成**：用戶可以調整參數和設置，以生成符合特定需求和偏好的圖像。<br/>4. **社區分享**：平台支持用戶分享他們的創作，並與其他藝術家和創作者交流和互動。<br/>5. **商業用途**：提供商業使用權限，允許用戶將生成的圖像用於商業項目和設計中。</p>
<p>這些功能旨在激發創意靈感，並使藝術創作變得更加便捷和富有趣味。MidJourney適合藝術家、設計師以及任何對圖像創作感興趣的人使用。</p>
<p>AI Studio</p>
<p>是由 Google 提供的一個人工智慧對話平台，旨在讓用戶創建、測試和部署定制的對話式 AI 應用。其主要功能包括：</p>
<p>1. **對話設計**：提供直觀的界面，用戶可以輕鬆設計對話流程和交互場景。<br/>2. **多語言支持**：支持多種語言的對話設計和處理，方便全球用戶使用。<br/>3. **機器學習集成**：集成了機器學習模型，可以自動學習和改進對話系統的回應質量。<br/>4. **測試和優化**：提供測試環境，用戶可以模擬對話場景，並根據測試結果優化對話流程。<br/>5. **部署選項**：支持多種部署方式，用戶可以將對話應用部署到網站、移動應用、智能設備等各種平台。<br/>6. **分析和報告**：提供詳細的使用統計和分析報告，幫助用戶了解和改進對話系統的性能。</p>
<p>這些功能旨在幫助用戶快速創建和部署高效的對話式 AI 應用，提升用戶體驗和業務效率。無論是初學者還是專業開發者，AI Studio 都提供了強大的工具和資源來支持其開發工作。</p>
<p>Hume AI</p>
<p>是一個專注於情感人工智慧的在線平台，其主要功能包括：</p>
<p>1. **情感分析**：利用先進的AI技術來分析文本、語音和視頻中的情感，識別出喜怒哀樂等多種情感狀態。<br/>2. **情感數據集**：提供標註好的情感數據集，用於訓練和測試情感AI模型。<br/>3. **情感API**：提供API接口，允許開發者將情感分析功能集成到自己的應用程序和服務中。<br/>4. **多模態情感理解**：能夠結合多種數據來源（如語音和面部表情）進行綜合情感分析，提高準確性。<br/>5. **實時分析**：支持實時情感分析，適用於需要即時反饋的應用場景，如客戶服務和互動娛樂。<br/>6. **報告和洞察**：提供詳細的分析報告和情感洞察，幫助企業理解和改善用戶體驗。</p>
<p>這些功能旨在幫助企業和開發者更好地理解和應對用戶的情感需求，提升產品和服務的情感智能水平。無論是在客戶支持、營銷還是互動娛樂領域，Hume AI 都提供了強大的工具來增強人機交互的情感體驗。</p>
<h2>心得</h2>
<p>在國立虎尾科技大學機械設計工程系的協同產品設計實習課程中，我學到了如何運用多種先進的工具和平台進行協同設計及開發。這包括使用Web-based環境如Github和Onshape，近端套件如CoppeliaSim，以及Odoo PLM系統來有效地進行產品設計和管理。通過每週的網誌撰寫、上課摘要整理和分組報告執行，我們不僅加深了對課程內容的理解，還學會了如何有效地組織和協作。期中和期末的LaTeX報告與影片簡報更加深了我對產品生命週期管理的理解，從設計到開發再到生產階段，每個階段的具體操作和協同工作都讓我受益匪淺。這段學習經歷不僅擴展了我的技術能力，也提升了我的團隊合作和問題解決能力，為未來的職業發展打下了堅實的基礎。</p>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
</div>
</div>
</div>
</div>
</div>
</div>